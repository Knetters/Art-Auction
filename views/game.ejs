<%- include('./partials/head') %>

<%- include('./partials/iconBar') %>

<%- include('./partials/collection') %>

<section class="inner-game">
  <div class="large-padding-top">
    <% if ("1" === '1') { %>
      <section class="medium-menu">
        <form id="draw-input-form">
          <h2>What should the painter make for you</h2>
          <input id="prompt" type="text" autocomplete="off" spellcheck="false" maxlength="75" required>
          <button type="submit">Start</button>
        </form>
      </section>
    <% } else { %>
      <h2>The art curator is preparing a prompt</h2>
    <% } %>
  </div>

</section>

<section class="inner-game">
  <div class="small-padding-top">
    <div id="drawing-board" class="drawing-container">
      <div class="draw-title-header">
        <h2 id="promptValue">This is the place where the drawing info stands</h2>
        <span class="draw-time-indicator"><%= drawTime %></span>
      </div>
      
      <div class="horizontal-flex-row">
        <div class="color-box horizontal-flex-item">
          <div class="color-flex-container">
            <div class="color-item-pair">
              <button class="color-item blue" onclick="changeBrushColor('#1c43df')"></button>
              <button class="color-item blue2" onclick="changeBrushColor('#7993fd')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item purple" onclick="changeBrushColor('#6d1cdf')"></button>
              <button class="color-item purple2" onclick="changeBrushColor('#b784ff')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item red" onclick="changeBrushColor('#d53838')"></button>
              <button class="color-item red2" onclick="changeBrushColor('#ff8282')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item pink" onclick="changeBrushColor('#e781eb')"></button>
              <button class="color-item pink2" onclick="changeBrushColor('#fdbbff')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item orange" onclick="changeBrushColor('#e48236')"></button>
              <button class="color-item orange2" onclick="changeBrushColor('#ffb378')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item yellow" onclick="changeBrushColor('#f2d532')"></button>
              <button class="color-item yellow2" onclick="changeBrushColor('#fff99e')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item green" onclick="changeBrushColor('#498a47')"></button>
              <button class="color-item green2" onclick="changeBrushColor('#90ff8d')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item brown" onclick="changeBrushColor('#4f3422')"></button>
              <button class="color-item brown2" onclick="changeBrushColor('#ac6535')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item beige" onclick="changeBrushColor('#bca88c')"></button>
              <button class="color-item beige2" onclick="changeBrushColor('#fbdcb2')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item darkgray" onclick="changeBrushColor('#595959')"></button>
              <button class="color-item gray" onclick="changeBrushColor('#b6b6b6')"></button>
            </div>
            <div class="color-item-pair">
              <button class="color-item black" onclick="changeBrushColor('#141414')"></button>
              <button class="color-item white" onclick="changeBrushColor('#e9e9e9')"></button>
            </div>

            <h4>Pick color</h4>
            <input name="colorPicker" class="color-picker" type="color" id="colorPicker" value="#000000" onchange="updateBrushColor()">

            <h4>Brush size</h4>
            <input type="range" min="3" max="256" value="3" class="brush-slider" id="brushSizeInput" onchange="updateBrushSize()">
            </div>

          <img id="trashIcon" class="trashIcon restart-button" src="/img/delete-alt-svgrepo-com.svg" onclick="restart()">
        </div>
        <div class="draw-box horizontal-flex-item">
          <canvas class="drawing-canvas" id="drawing-canvas"></canvas>
        </div>
      </div>
    </div>
  </div>
</section>

<%- include('./partials/foot') %>

<script>
  const form = document.getElementById('draw-input-form');
  
  // Get the prompt element and the heading element
  let prompt = document.getElementById('prompt');
  let promptValue = document.getElementById('promptValue');

  let promptTitles = [];

form.addEventListener('submit', (e) => {
  e.preventDefault(); // Prevent form submission and page refresh

  if (promptValue) {
    promptValue.textContent = prompt.value;
    promptTitles.push = prompt.value

    navigateToDrawingBoard();
  }
});

function navigateToDrawingBoard() {
  const drawingAnchor = document.getElementById('drawing-board');
  if (drawingAnchor) {
    drawingAnchor.scrollIntoView({ behavior: 'smooth' });
  }
}

  // Get the drawing canvas element
  const canvas = document.querySelector('.drawing-canvas');
  const ctx = canvas.getContext('2d');

  // Set the canvas size
  canvas.width = canvas.clientWidth;
  canvas.height = canvas.clientHeight;

  // Variables
  let isDrawing = false;
  let lastX = 0;
  let lastY = 0;
  let brushSize = 3; // You can set the desired default brush size
  let brushColor = "#000000"; // Default brush color (black)

function changeBrushColor(color) {
  brushColor = color;
}

  // Variable to store drawing history for the undo functionality
  let drawingHistory = [];

  // Function to update the brush size based on the input element's value
  function updateBrushSize() {
    const brushSizeInput = document.getElementById('brushSizeInput');
    brushSize = brushSizeInput.value;
  }

  // Function to update the brush color based on the color picker's value
  function updateBrushColor() {
    const colorPicker = document.getElementById('colorPicker');
    brushColor = colorPicker.value;
  }

  function startDrawing(e) {
    isDrawing = true;
    [lastX, lastY] = [e.offsetX, e.offsetY];

    // Save the initial point for undo purposes
    drawingHistory.push({ x: lastX, y: lastY });
  }

  function draw(e) {
    if (!isDrawing) return;
    const [x, y] = [e.offsetX, e.offsetY];

    // Draw on the client's canvas with circular strokes
    ctx.lineCap = "round"; // Set the line cap to round for circular strokes
    ctx.beginPath();
    ctx.moveTo(lastX, lastY);
    ctx.lineTo(x, y);

    // Set the line thickness and color
    ctx.lineWidth = brushSize;
    ctx.strokeStyle = brushColor;
    ctx.stroke();

    [lastX, lastY] = [x, y];

    // Save the new point for undo purposes
    drawingHistory.push({ x: lastX, y: lastY });
  }

  function stopDrawing() {
    isDrawing = false;
  }

  function restart() {
    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Clear the drawing history
    drawingHistory = [];
  }

  // Add event listeners to handle drawing
  canvas.addEventListener('mousedown', startDrawing);
  canvas.addEventListener('mousemove', draw);
  canvas.addEventListener('mouseup', stopDrawing);
  canvas.addEventListener('mouseout', stopDrawing);
</script>
<%- include('./partials/head') %>

<%- include('./partials/iconBar') %>

<%- include('./partials/collection') %>

<section class="inner-game">
  <div class="large-padding-top">
    <% if ("1" === '1') { %>
      <section class="medium-menu">
        <form>
          <h2>What should the painter make for you</h2>
          <input id="prompt" type="text" autocomplete="off" spellcheck="false" maxlength="75">
        </form>

        <button onclick="navigateToDrawingBoard()">Start</button>
      </section>
    <% } else { %>
      <h2>The art curator is preparing a prompt</h2>
    <% } %>
  </div>

</section>

<section class="inner-game">
  <div class="small-padding-top">
    <div id="drawing-board" class="drawing-container">
      <h2 id="promptValue">This is the place where the drawing info stands</h2>
      <div class="horizontal-flex-row">
        <div class="color-box horizontal-flex-item">
          <div class="color-flex-container">
            <div class="color-item-pair">
              <div class="color-item blue"></div>
              <div class="color-item purple"></div>
            </div>
            <div class="color-item-pair">
              <div class="color-item red"></div>
              <div class="color-item pink"></div>
            </div>
            <div class="color-item-pair">
              <div class="color-item orange"></div>
              <div class="color-item yellow"></div>
            </div>
            <div class="color-item-pair">
              <div class="color-item darkgreen"></div>
              <div class="color-item green"></div>
            </div>
            <div class="color-item-pair">
              <div class="color-item brown"></div>
              <div class="color-item beige"></div>
            </div>
            <div class="color-item-pair">
              <div class="color-item darkgray"></div>
              <div class="color-item gray"></div>
            </div>
            <div class="color-item-pair">
              <div class="color-item black"></div>
              <div class="color-item white"></div>
            </div>
            <form class="color-picker-form">
              <input name="colorPicker" class="color-picker" type="color" id="colorPicker" value="#000000" onchange="updateBrushColor()">
            </form>
            </div>
          <button class="restart-button" onclick="restart()">Restart</button>
        </div>
        <div class="draw-box horizontal-flex-item">
          <canvas class="drawing-canvas" id="drawing-canvas"></canvas>
        </div>
        <div class="brush-box horizontal-flex-item">
          <!-- Add an input element to adjust the brush size -->
          <input type="range" min="3" max="256" value="3" class="brush-size-slider" id="brushSizeInput" orient="vertical" onchange="updateBrushSize()">
        </div>
      </div>
    </div>
  </div>
</section>

<%- include('./partials/foot') %>

<script>
  // Get the prompt element and the heading element
  var prompt = document.getElementById('prompt');
  var promptValue = document.getElementById('promptValue');

  if (promptValue) {
    // Add an event listener to the slider to detect changes
    prompt.addEventListener('input', function () {
      // Update the text content of the draw-time-value element with the slider's value
      promptValue.textContent = prompt.value;
    });
  }

  function navigateToDrawingBoard() {
    const drawingAnchor = document.getElementById('drawing-board');
    if (drawingAnchor) {
      drawingAnchor.scrollIntoView({ behavior: 'smooth' });
    }
  }

  // Get the drawing canvas element
  const canvas = document.querySelector('.drawing-canvas');
  const ctx = canvas.getContext('2d');

  // Set the canvas size
  canvas.width = canvas.clientWidth;
  canvas.height = canvas.clientHeight;

  // Variables
  let isDrawing = false;
  let lastX = 0;
  let lastY = 0;
  let brushSize = 3; // You can set the desired default brush size
  let brushColor = "#000000"; // Default brush color (black)

  // Variable to store drawing history for the undo functionality
  let drawingHistory = [];

  // Function to update the brush size based on the input element's value
  function updateBrushSize() {
    const brushSizeInput = document.getElementById('brushSizeInput');
    brushSize = brushSizeInput.value;
  }

  // Function to update the brush color based on the color picker's value
  function updateBrushColor() {
    const colorPicker = document.getElementById('colorPicker');
    brushColor = colorPicker.value;
  }

  function startDrawing(e) {
    isDrawing = true;
    [lastX, lastY] = [e.offsetX, e.offsetY];

    // Save the initial point for undo purposes
    drawingHistory.push({ x: lastX, y: lastY });
  }

  function draw(e) {
    if (!isDrawing) return;
    const [x, y] = [e.offsetX, e.offsetY];

    // Draw on the client's canvas with circular strokes
    ctx.lineCap = "round"; // Set the line cap to round for circular strokes
    ctx.beginPath();
    ctx.moveTo(lastX, lastY);
    ctx.lineTo(x, y);

    // Set the line thickness and color
    ctx.lineWidth = brushSize;
    ctx.strokeStyle = brushColor;
    ctx.stroke();

    [lastX, lastY] = [x, y];

    // Save the new point for undo purposes
    drawingHistory.push({ x: lastX, y: lastY });
  }

  function stopDrawing() {
    isDrawing = false;
  }

  function restart() {
    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Clear the drawing history
    drawingHistory = [];
  }

  // Add event listeners to handle drawing
  canvas.addEventListener('mousedown', startDrawing);
  canvas.addEventListener('mousemove', draw);
  canvas.addEventListener('mouseup', stopDrawing);
  canvas.addEventListener('mouseout', stopDrawing);
</script>